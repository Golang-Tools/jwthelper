// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jwtverifier_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JwtverifierClient is the client API for Jwtverifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JwtverifierClient interface {
	//查看jwt服务元信息的算法
	Meta(ctx context.Context, in *MetaRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	// Verify 将token解析到的负载转码为JSON字符串返回
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
}

type jwtverifierClient struct {
	cc grpc.ClientConnInterface
}

func NewJwtverifierClient(cc grpc.ClientConnInterface) JwtverifierClient {
	return &jwtverifierClient{cc}
}

func (c *jwtverifierClient) Meta(ctx context.Context, in *MetaRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, "/jwt.verifier.jwtverifier/Meta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtverifierClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, "/jwt.verifier.jwtverifier/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JwtverifierServer is the server API for Jwtverifier service.
// All implementations must embed UnimplementedJwtverifierServer
// for forward compatibility
type JwtverifierServer interface {
	//查看jwt服务元信息的算法
	Meta(context.Context, *MetaRequest) (*MetaResponse, error)
	// Verify 将token解析到的负载转码为JSON字符串返回
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
	mustEmbedUnimplementedJwtverifierServer()
}

// UnimplementedJwtverifierServer must be embedded to have forward compatible implementations.
type UnimplementedJwtverifierServer struct {
}

func (UnimplementedJwtverifierServer) Meta(context.Context, *MetaRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Meta not implemented")
}
func (UnimplementedJwtverifierServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedJwtverifierServer) mustEmbedUnimplementedJwtverifierServer() {}

// UnsafeJwtverifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JwtverifierServer will
// result in compilation errors.
type UnsafeJwtverifierServer interface {
	mustEmbedUnimplementedJwtverifierServer()
}

func RegisterJwtverifierServer(s grpc.ServiceRegistrar, srv JwtverifierServer) {
	s.RegisterService(&Jwtverifier_ServiceDesc, srv)
}

func _Jwtverifier_Meta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtverifierServer).Meta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwt.verifier.jwtverifier/Meta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtverifierServer).Meta(ctx, req.(*MetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jwtverifier_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtverifierServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwt.verifier.jwtverifier/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtverifierServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Jwtverifier_ServiceDesc is the grpc.ServiceDesc for Jwtverifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jwtverifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jwt.verifier.jwtverifier",
	HandlerType: (*JwtverifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Meta",
			Handler:    _Jwtverifier_Meta_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Jwtverifier_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pbschema/jwtverifier.proto",
}
